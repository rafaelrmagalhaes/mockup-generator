{"version":3,"sources":["marca_dagua.png","camisa_frente.png","camisa_costas.png","preview/index.js","bar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Preview","props","className","style","backgroundImage","bgImg","data","src","id","alt","marginTop","topDistance","marginLeft","leftDistance","width","Bar","state","nextProps","nextState","this","onUpdate","e","f","target","files","reader","FileReader","onload","setState","result","readAsDataURL","position","index","type","name","onChange","showUploadedImg","htmlFor","min","max","value","Component","App","color","frontData","backData","marca_dagua","backgroundColor","camisa_frente","camisa_costas","changeColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92288b33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marca_dagua.aa35bae6.png\";","module.exports = __webpack_public_path__ + \"static/media/camisa_frente.527c098b.png\";","module.exports = __webpack_public_path__ + \"static/media/camisa_costas.ad59608e.png\";","import React from 'react';\nimport './style.scss';\n\n// 3px = 1cm\n\nconst Preview = (props) => (\n  <div className=\"preview\" style={{ backgroundImage: `url(${props.bgImg})` }}>\n    {props.data && props.data.src && <img \n      id=\"img_preview\" \n      alt=\"Camisa Frente\"\n      src={props.data.src}\n      style={{\n        marginTop: props.data.topDistance * 3,\n        marginLeft: `${props.data.leftDistance}px`,\n        width: props.data.width * 3\n      }}\n    /> }\n  </div>\n);\n\nexport default Preview;","import React, { Component } from 'react';\n\nexport default class Bar extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      src: null,\n      width: 10,\n      topDistance: 6,\n      leftDistance: 0,\n    }\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextState !== this.state) {\n      this.props.onUpdate(nextState);\n    }\n  }\n\n  showUploadedImg(e) {\n    const f = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (() => {\n      return (e) => {\n        this.setState({\n          src: e.target.result\n        });\n      };\n    })();\n    \n    reader.readAsDataURL(f);\n  }\n\n  render() {\n    return (\n      <div className={this.props.position}>\n        <p>{this.props.position === 'left' ? 'Frente': 'Costas'}:</p>\n        <fieldset>\n          <legend>Imagem {this.props.index}</legend>\n          {this.state.src && <img className=\"preview_bar\" src={this.state.src} alt=\"Preview\"/>}\n          <input type=\"file\" name=\"file\" onChange={(e) => this.showUploadedImg(e)} />\n          <br /><br />\n          <label htmlFor=\"top\">Distância da gola: <input type=\"range\" id=\"top\" min=\"6\" max=\"60\" value={this.state.topDistance} onChange={e => this.setState({ topDistance: e.target.value })} /></label>\n          <br /><br />\n          <label htmlFor=\"left\">Distância horizontal: <input type=\"range\" id=\"left\" min=\"0\" max=\"250\" value={this.state.leftDistance} onChange={e => this.setState({ leftDistance: e.target.value })} /></label>\n          <br /><br />\n          <label htmlFor=\"top\">Tamanho da imagem: <input type=\"range\" id=\"width\" min=\"10\" max=\"80\" value={this.state.width} onChange={e => this.setState({ width: e.target.value })} /></label>\n        </fieldset>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport Preview from './preview';\nimport Bar from './bar';\nimport marca_dagua from './marca_dagua.png';\nimport camisa_frente from './camisa_frente.png';\nimport camisa_costas from './camisa_costas.png';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n  \n    this.state = {\n      color: '#fff',\n      frontData: [],\n      backData: [],\n    };\n  }\n\n  changeColor(e) {\n    this.setState({\n      color: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <img src={marca_dagua} className=\"watermark\" alt=\"Estampa Personalizada\" />\n        <div className=\"mockup\" style={{backgroundColor: this.state.color}}>\n          <Preview \n            data={this.state.frontData}\n            bgImg={camisa_frente}\n          />\n          <Preview \n            data={this.state.backData}\n            bgImg={camisa_costas}\n          />\n        </div>\n\n        <div className=\"color\">\n          <label htmlFor=\"color\">Cor da camisa:</label>\n          <select id=\"color\" onChange={(e) => this.changeColor(e)}>\n            <option value=\"#fff\">Branca</option>\n            <option value=\"#f00\">Vermelha</option>\n            <option value=\"#00f\">Azul</option>\n            <option value=\"#0f0\">Verde</option>\n          </select>\n        </div>\n\n        <hr/>\n\n        <Bar position=\"left\" index={1} onUpdate={ frontData => this.setState({ frontData }) } />\n        <Bar position=\"right\" index={1} onUpdate={ backData => this.setState({ backData }) } />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}